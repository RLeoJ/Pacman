<diagram program="umletino" version="14.4.0-SNAPSHOT"><zoom_level>10</zoom_level><help_text>Space for diagram notes</help_text><element><id>UMLClass</id><coordinates><x>670</x><y>218</y><w>400</w><h>140</h></coordinates><panel_attributes>level.h
--
public:
void readfile() //take strings from text file and assign type
void populategrid() //loop through grid and spawn cube based on type
private:
Vector&lt;Cube&gt;
Array&lt;Array&lt;tiletype, Width&gt; Height&gt;
	</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>490</x><y>268</y><w>200</w><h>40</h></coordinates><panel_attributes>lt=&lt;.
&lt;&lt;include&gt;&gt;</panel_attributes><additional_attributes>180;20;10;20</additional_attributes></element><element><id>UMLClass</id><coordinates><x>700</x><y>38</y><w>210</w><h>180</h></coordinates><panel_attributes>_enum class tiletype_
--
empty,
wall,
pacman,
ghost,
food,
powerfood
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1070</x><y>218</y><w>160</w><h>140</h></coordinates><panel_attributes>level.cpp
--
void level::readfile()

void level::populategrid()</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>458</y><w>280</w><h>170</h></coordinates><panel_attributes>_move.h_
--
public:
void CheckSpaces() //check all adjacent 
spaces for valid move option
void newPosition() //if chosen space is valid, 
set set current position as new position
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>270</x><y>258</y><w>100</w><h>100</h></coordinates><panel_attributes>_cube.h_
--
public:
void update(dt)
void load()
void draw()
private:
vector4 color
float scale;
enum tiletype;</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>370</x><y>258</y><w>130</w><h>100</h></coordinates><panel_attributes>_cube.cpp_
--
public:
cube::void update(dt)
cube::void load()
cube::void draw()</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>580</x><y>418</y><w>260</w><h>160</h></coordinates><panel_attributes>_ghost.h_
--
class ghost : public cube
public:

void init()
bool MoveDecision()
float NewPosotion()
void move()
void Update(dt)

private:
bool eaten;</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>270</x><y>508</y><w>330</w><h>70</h></coordinates><panel_attributes>lt=&lt;.
&lt;&lt;include&gt;&gt;</panel_attributes><additional_attributes>310;10;10;50</additional_attributes></element><element><id>Relation</id><coordinates><x>310</x><y>348</y><w>290</w><h>350</h></coordinates><panel_attributes>lt=&lt;.
&lt;&lt;include&gt;&gt;</panel_attributes><additional_attributes>270;330;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>638</y><w>280</w><h>170</h></coordinates><panel_attributes>_input.h_
--
public:
void newPosition() //if chosen space is valid, 
set set current position as new position
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>580</x><y>588</y><w>260</w><h>180</h></coordinates><panel_attributes>_pacman.h_
--
class pacman : public cube
public:
bool MoveDecision() 
void update(dt, newposition) override //this will 
be triggered in an input system in 
game::handleInputs()


private:
bool eaten;</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>580</x><y>798</y><w>260</w><h>160</h></coordinates><panel_attributes>_wall.h_
--
class wall : public cube
public:
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>580</x><y>968</y><w>260</w><h>160</h></coordinates><panel_attributes>_food.h_
--
class food : public cube
public:

private:
bool eaten;
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>580</x><y>1138</y><w>260</w><h>160</h></coordinates><panel_attributes>_superfood.h_
--
class superfood : public cube
public:


private:
bool eaten;</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>270</x><y>548</y><w>330</w><h>150</h></coordinates><panel_attributes>lt=&lt;.
&lt;&lt;include&gt;&gt;</panel_attributes><additional_attributes>310;130;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>270</x><y>668</y><w>330</w><h>80</h></coordinates><panel_attributes>lt=&lt;.
&lt;&lt;include&gt;&gt;</panel_attributes><additional_attributes>310;10;10;60</additional_attributes></element><element><id>Relation</id><coordinates><x>310</x><y>348</y><w>290</w><h>190</h></coordinates><panel_attributes>lt=&lt;.
&lt;&lt;include&gt;&gt;</panel_attributes><additional_attributes>270;170;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>310</x><y>348</y><w>290</w><h>740</h></coordinates><panel_attributes>lt=&lt;.
&lt;&lt;include&gt;&gt;</panel_attributes><additional_attributes>270;720;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>320</x><y>358</y><w>280</w><h>560</h></coordinates><panel_attributes>lt=&lt;.
&lt;&lt;include&gt;&gt;</panel_attributes><additional_attributes>260;540;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>310</x><y>348</y><w>290</w><h>900</h></coordinates><panel_attributes>lt=&lt;.
&lt;&lt;include&gt;&gt;</panel_attributes><additional_attributes>270;880;10;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>840</x><y>418</y><w>290</w><h>160</h></coordinates><panel_attributes>_ghost.cpp_
--
void ghost::init(){
move towards pacman
}

ghost::MoveDecision(){
decide of ghost wants to move closer or farther
return decision
}

ghost::NewPosotion(){
if farther
	for each adjacent tile, 
		if tile is farther than all other options //this must be split 
                into an if and 3 more elseif's
			return newPostion
if closer
	for each adjacent tile, 
		if tile is closer than all other options //this must be split 
                into an if and 3 more elseif's
			return newPostion
}

ghost::move(){
set current position to new position
lerp ghost to current position with dt
}

move::CheckSpaces(){
if player is moving on the Y
    if there is an option to move to X
        return turn
if player is moving on the X
    if there is an option to move to Y
        return turn
}

ghost::Update(dt){

    if ghost reaches a turn {
        MoveDecision()
        NewPosotion()
    }
Update(dt)
}



</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>808</y><w>280</w><h>170</h></coordinates><panel_attributes>_input.cpp_
--

input::input(){

} </panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1270</x><y>418</y><w>290</w><h>160</h></coordinates><panel_attributes>_game.cpp_
--

game::init(){
ghost = ghost();
}

game::update(){
ghost.update(){}
}</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1120</x><y>478</y><w>170</w><h>40</h></coordinates><panel_attributes>lt=&lt;.
&lt;&lt;include&gt;&gt;</panel_attributes><additional_attributes>150;20;10;20</additional_attributes></element></diagram>